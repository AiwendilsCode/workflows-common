name: Create Release

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      as_draft:
        required: false
        default: false
        type: boolean
      prerelease: # deprecated/unused
        required: false
        default: false
        type: boolean
      trigger_conclusion:
        description: "Conclusion of triggering workflow_run."
        type: string
        required: false
        default: ""
        
jobs: 
  conditional_fail:
    runs-on: self-hosted
    steps:
      - uses: actions/github-script@v7
        if: ${{ inputs.trigger_conclusion != 'success' && inputs.trigger_conclusion != '' }}
        with:
          script: |
            core.setFailed('Trigger conclustion was not successful (' + '${{ inputs.trigger_conclusion }}' + ')')

  create_release:
    needs: conditional_fail
    runs-on: self-hosted
    if: ${{ inputs.trigger_conclusion == 'success' || inputs.trigger_conclusion == '' }}
    steps:

    - name: Create GitHub Release
      id: create_release
      shell: pwsh
      run: |
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Install-Module PSGitHub -Scope CurrentUser -Force

        $secureToken = ConvertTo-SecureString ${{ secrets.GITHUB_TOKEN }} -AsPlainText
        $tagName = "${{ inputs.tag }}"

        $preRelease = $false
        if ($tagName.Contains('-')) {
            $preRelease = $true
        }

        $asDraft = $${{ inputs.as_draft }}

        New-GitHubRelease -RepositoryName ${{ github.event.repository.name }} -Owner ${{ github.event.repository_owner }} -TagName $tagName -Token $secureToken -PreRelease:$preRelease -Draft:$asDraft
    
    - name: Upload artifacts as assets
      uses: actions/github-script@v7
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          for (const artifact of allArtifacts.data.artifacts)
          {
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: artifact.id,
               archive_format: 'zip',
            });
            
            github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              name: artifact.name + '.zip',
              data: download.data,
            });
            
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${artifact.name}.zip`, Buffer.from(download.data));
          }
